#region

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
// ReSharper disable All

#endregion

namespace NpcProtector
{
    public class Program
    {
        private static Lazy<Settings.Settings> _settings = null!;
        // This is a list of all EditorIDs of NPCs we want to check
        // Data type that defines a setting of how verbose the log should be.
        private enum OutputLevel
        {
            Disabled,
            Normal,
            Verbose,
            Debug,
        };

        // can be set to any of the above levels of verboseness
        private const OutputLevel PatcherOutputLevel = OutputLevel.Normal;

        // Check if the NPC has the Protected Flag
        private static bool NpcIsProtected(INpcGetter npc)
        {
            if (!npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Protected)) return false;
            if (PatcherOutputLevel == OutputLevel.Verbose ||
                PatcherOutputLevel == OutputLevel.Debug)
            {
                Console.WriteLine("[INFO] [Skipping] \"" + npc.EditorID +
                                  "\" is already protected and will be skipped.");
            }

            return true;
        }

        // Checks if the given NPC has the Essential Flag
        private static bool NpcIsEssential(INpcGetter npc)
        {
            if (!npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Essential)) return false;
            if (PatcherOutputLevel == OutputLevel.Verbose ||
                PatcherOutputLevel == OutputLevel.Debug)
            {
                Console.WriteLine("[INFO] [Skipping] \"" + npc.EditorID + "\" is Essential and will be skipped.");
            }

            return true;
        }

        // Check if the NPC matches an entry in the list
        private static bool NpcMatchesListEditorID(INpcGetter npc)
        {
            //if (_settings.Value.NpCsToProtect.Contains(npc.EditorID ?? "")) return true;
            if (_settings.Value.NpcsToProtect.Contains(npc)) return true;
            if (PatcherOutputLevel == OutputLevel.Debug)
            {
                Console.WriteLine("[INFO] \"" + npc.EditorID +
                                  "\" is not in the list of NPCs to mark as protected.");
            }

            return false;
        }

        public static async Task<int> Main(string[] args)
        {
	        return await SynthesisPipeline.Instance
		        .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings<Settings.Settings>("settings", "settings.json", out _settings)
		        .SetTypicalOpen(GameRelease.SkyrimSE, "NpcProtector.esp")
		        .Run(args);
        }
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var npc in state.LoadOrder.PriorityOrder.WinningOverrides<INpcGetter>())
            {
                // filter out NPCs that don't match the EditorIDs defined in NpcsToProtect, are already flagged as protected or flagged as essential
                if (!NpcMatchesListEditorID(npc)) continue;

                if (NpcIsEssential(npc)) continue;

                if (NpcIsProtected(npc)) continue;

                if (PatcherOutputLevel != OutputLevel.Disabled)
                {
                    Console.WriteLine("[INFO] [Processing] \"" + npc.EditorID + "\" will be flagged as Protected.");
                }

                // Patch NPCs
                var npcPatch = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                npcPatch.Configuration.Flags |= NpcConfiguration.Flag.Protected;

                // Handle error of NPC not being flagged as protected after it should have been
                if (!npcPatch.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Protected))
                    Console.WriteLine("[ERROR] \"" + npc.EditorID +
                                      "\" was not flagged as Protected for whatever reason.");
            }
        }
    }
}
